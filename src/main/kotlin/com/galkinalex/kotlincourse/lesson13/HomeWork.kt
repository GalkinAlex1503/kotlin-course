package com.galkinalex.kotlincourse.lesson13


//1.
//Задачи на приведение коллекций к значению
//Подбери подходящий для задачи метод
//Проверить, что размер коллекции больше 5 элементов. --   size
//Проверить, что коллекция пустая -- isEmpty
//Проверить, что коллекция не пустая -- isNotEmpty
//Взять элемент по индексу или создать значение если индекса не существует -- getOrElse
//Собрать коллекцию в строку -- joinToString
//Посчитать сумму всех значений -- sum
//Посчитать среднее -- average
//Взять максимальное число -- maxOrNull
//Взять минимальное число -- minOrNull
//Взять первое число или null -- firstOrNull
//Проверить что коллекция содержит элемент -- contains
//
//Задачи на обработку коллекций
//
//Отфильтровать коллекцию по диапазону 18-30 -- filter
//Выбрать числа, которые не делятся на 2 и 3 одновременно -- filterNot
//Очистить текстовую коллекцию от null элементов -- filterNotNull
//Преобразовать текстовую коллекцию в коллекцию длин слов -- map
//Преобразовать текстовую коллекцию в мапу, где ключи - слова, а значения - перевёрнутые слова -- associate
//Отсортировать список в алфавитном порядке -- sorted
//Отсортировать список по убыванию -- sortedDescending
//Распечатать квадраты элементов списка -- forEach
//Группировать список по первой букве слов -- groupBy
//Очистить список от дублей  --  distinct
//Взять первые 3 элемента списка -- take
//Взять последние 3 элемента списка -- takeLast

//Задание 2: Характеристика числовой коллекции
//Написать метод, который принимает коллекцию чисел и возвращает строку с текущим состоянием коллекции используя конструкцию when
//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”
//Вызвать метод с данными, подходящими под каждую из веток
//
//Задание 3: Анализ Учебных Оценок
//Начальные значения: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
////
//Задание 4: Создание каталога по первой букве.
//Начальные значения: val list = listOf(
//    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка"
//)
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве.
//
//Задание 5: Подсчёт средней длины слов в списке.
//Начальные значения из задачи 3.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вывести форматированный текст с двумя знаками после запятой.
//
//Задание 6: Категоризация чисел.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
//
//Задание 7: Поиск первого подходящего элемента
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60)
//Цель: Найти первый возраст в списке, который соответствует условию (больше 18), преобразовать его к строке, или вернуть сообщение "Подходящий возраст не найден".


fun main() {
    println("Задание 2:")
    val list1 = listOf<Int>()
    println("$list1 -> ${analize(list1)}")
    val list2 = listOf(1, 2, 3, 4)
    println("$list2 -> ${analize(list2)}")
    val list3 = listOf(0, 1, 2, 3, 4, 5, 6)
    println("$list3 -> ${analize(list3)}")
    val list4 = listOf(1, 2, 3, 4, 5, 10000)
    println("$list4 -> ${analize(list4)}")
    val list5 = listOf(10, 10, 10, 10, 10, 10, 10)
    println("$list5 -> ${analize(list5)}")
    val list6 = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0)
    println("$list6 -> ${analize(list6)}")
    val list7 = listOf(-101, -500, -30, -11, -12)
    println("$list7 -> ${analize(list7)}")
    val list8 = listOf(1001, 1002, 1003, 1004, 1005, 1006)
    println("$list8 -> ${analize(list8)}")
    val list9 = listOf(1, 2, 3, 14, 5)
    println("$list9 -> ${analize(list9)}")
    val list10 = listOf(1, 2, 3, 4, 5, 5, 6, 7, 8, 8)
    println("$list10 -> ${analize(list10)}")
    println()

    println("Задание 3: ")
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    println(grades.filter { it >= 60 }.sorted().take(3))
    println()

    println("Задание 4:")
    val listTask4 = listOf(
        "Стол",
        "табурет",
        "ваза",
        "Кружка",
        "Зеркало",
        "ковер",
        "Шкаф",
        "часы",
        "Люстра",
        "подушка",
        "Картина",
        "столик",
        "Вазон",
        "шторы",
        "Пуф",
        "книга",
        "Фоторамка",
        "светильник",
        "Коврик",
        "вешалка",
        "Подставка",
        "телевизор",
        "Комод",
        "полка",
        "Абажур",
        "диван",
        "Кресло",
        "занавеска",
        "Бра",
        "пепельница",
        "Глобус",
        "статуэтка",
        "Поднос",
        "фигурка",
        "Ключница",
        "плед",
        "Тумба",
        "игрушка",
        "Настенные часы",
        "подсвечник",
        "Журнальный столик",
        "сувенир",
        "Корзина для белья",
        "посуда",
        "Настольная лампа",
        "торшер",
        "Этажерка"
    )
    println(listTask4.map { it.lowercase() }.groupBy { it[0] })
    println()

    println("Задание 5:")
    println(String.format("%.2f", listTask4.map { it.length }.average()))
    println()

    println("Задание 6:")
    val listTask6 = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    println(listTask6.distinct().sortedDescending().groupBy { if (it % 2 == 0) "чет" else "нечет" })
    println()

    println()
    println("Задание 7:")
    val listTask7 = listOf(22, 18, 30, 45, 17, null, 60)
    println(listTask7.filterNotNull().firstOrNull { it > 18 } ?: "Подходящий возраст не найден")
}

fun analize(list: List<Int>): String {
    return when {
        list.isEmpty() -> "Пусто"
        list.size < 5 -> "Короткая"
        list[0] == 0 -> "Стартовая"
        list.sum() > 10000 -> "Массивная"
        list.average() == 10.0 -> "Сбалансированная"
        list.joinToString("").length == 20 -> "Клейкая"
        list.max() < -10 -> "Отрицательная"
        list.min() > 1000 -> "Положительная"
        list.contains(3) && list.contains(14) -> "Пи***тая"
        else -> "Уникальная"
    }
}
